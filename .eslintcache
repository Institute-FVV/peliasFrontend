[{"C:\\Daten\\git\\peliasFrontend\\src\\index.js":"1","C:\\Daten\\git\\peliasFrontend\\src\\serviceWorker.js":"2","C:\\Daten\\git\\peliasFrontend\\src\\components\\App.js":"3","C:\\Daten\\git\\peliasFrontend\\src\\components\\appHeader.js":"4","C:\\Daten\\git\\peliasFrontend\\src\\pages\\reverseQueryManager.js":"5","C:\\Daten\\git\\peliasFrontend\\src\\pages\\queryManager.js":"6","C:\\Daten\\git\\peliasFrontend\\src\\components\\help.js":"7","C:\\Daten\\git\\peliasFrontend\\src\\components\\loadingBar.js":"8","C:\\Daten\\git\\peliasFrontend\\src\\components\\config.js":"9","C:\\Daten\\git\\peliasFrontend\\src\\components\\errorSnackbar.js":"10","C:\\Daten\\git\\peliasFrontend\\src\\pages\\fileUpload.js":"11","C:\\Daten\\git\\peliasFrontend\\src\\components\\infoSnackbar.js":"12"},{"size":633,"mtime":1605790360273,"results":"13","hashOfConfig":"14"},{"size":5227,"mtime":1605790360279,"results":"15","hashOfConfig":"14"},{"size":1373,"mtime":1611654016651,"results":"16","hashOfConfig":"14"},{"size":2509,"mtime":1611653952791,"results":"17","hashOfConfig":"14"},{"size":8301,"mtime":1611651503911,"results":"18","hashOfConfig":"14"},{"size":9072,"mtime":1611068115521,"results":"19","hashOfConfig":"14"},{"size":2672,"mtime":1611854372917,"results":"20","hashOfConfig":"14"},{"size":582,"mtime":1611049060696,"results":"21","hashOfConfig":"14"},{"size":165,"mtime":1611048787857,"results":"22","hashOfConfig":"14"},{"size":1389,"mtime":1611048495898,"results":"23","hashOfConfig":"14"},{"size":6657,"mtime":1611668406814,"results":"24","hashOfConfig":"14"},{"size":1436,"mtime":1611653691070,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"5uimc1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Daten\\git\\peliasFrontend\\src\\index.js",[],["52","53"],"C:\\Daten\\git\\peliasFrontend\\src\\serviceWorker.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\App.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\appHeader.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\reverseQueryManager.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\queryManager.js",["54"],"import React, { Component, Fragment } from 'react';\r\nimport { withRouter} from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n  Table, \r\n  Paper,\r\n  TableRow, \r\n  TableCell,\r\n  TableHead,\r\n  TableContainer,\r\n  TableBody,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { compose } from 'recompose';\r\n\r\nimport LoadingBar from '../components/loadingBar'\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\nimport { pelias_url } from '../components/config';\r\n\r\nconst styles = theme => ({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  headerTable: {\r\n    fontSize: \"20px\",\r\n    width: \"40%\"\r\n  },\r\n  queryInput: {\r\n    marginLeft: theme.spacing(1),\r\n    backgroundColor: \"white\",\r\n    width: \"100%\",\r\n    [theme.breakpoints.down('lg')]: {\r\n      width: theme.spacing(120)\r\n    },\r\n    [theme.breakpoints.down('md')]: {\r\n      width: theme.spacing(80)\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: theme.spacing(30)\r\n    },\r\n    [theme.breakpoints.down('xs')]: {\r\n      width: theme.spacing(20)\r\n    },\r\n  }\r\n});\r\n\r\nclass QueryManager extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      query: \"\",\r\n      result: \"\",\r\n\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var query = this.props.match.params.query\r\n\r\n    if(query && this.state.query !== query) {\r\n      // query is set but does not match the information in the state\r\n      this.setState({\r\n        query: query\r\n      }, this.executeQuery)\r\n    } \r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    this.setState({ loading: true })\r\n\r\n    try {\r\n      const response = await fetch(`${ pelias_url }search?text=${endpoint}`, {\r\n        method,\r\n        body: body && JSON.stringify(body),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      this.setState({ loading: false })\r\n      return await response.json();\r\n    } \r\n    catch (error) {\r\n      console.error(error);\r\n      this.setState({ \r\n        error: error,\r\n        loading: false \r\n      });\r\n    }\r\n  }\r\n\r\n  async executeQuery() {\r\n    let result = (await this.fetch('get', this.state.query)) || [] \r\n\r\n    if(result.features.length === 0) {\r\n      // no information could be returned by the endpoint\r\n      this.setState({ \r\n        error: \"For the given address no data could be queried\"\r\n      })\r\n    }\r\n\r\n    this.setState({ \r\n      result: result\r\n    });\r\n  }\r\n\r\n  handleSubmit = evt => {\r\n    const { history } = this.props;\r\n\r\n    // push information into history, so exportable\r\n    history.push(\"/query/\" + this.state.query)\r\n    \r\n    evt.preventDefault()\r\n    this.executeQuery()\r\n  }\r\n  \r\n  handleQueryChange = evt => {\r\n    this.setState({\r\n      query: evt.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    // revert escaped slashes\r\n    const readableQuery = this.state.query.replaceAll('%2F', '/')\r\n\r\n    return (\r\n      <Fragment>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <TextField\r\n            required \r\n            type=\"text\"\r\n            key=\"inputQuery\"\r\n            placeholder=\"Gusshausstrasse 30\"\r\n            className={ classes.queryInput }\r\n            value={ this.state.query }\r\n            onChange={ this.handleQueryChange }\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            autoFocus \r\n          />\r\n        </form>\r\n        {\r\n          this.state.result !== \"\" ? (\r\n            // result present\r\n            this.state.result.features.length !== 0 ? (\r\n            // endpoint provided information to present\r\n            <Fragment>\r\n              <Typography variant=\"h4\" component=\"h2\" gutterBottom> Result for { this.state.result.geocoding.query.text } </Typography>\r\n              <TableContainer component={ Paper }>\r\n                <Table className={ classes.table } aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Geometry </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>X</TableCell>\r\n                      <TableCell>{this.state.result.features[0].geometry.coordinates[0] }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Y</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].geometry.coordinates[1] }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Properties </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Postalcode</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.postalcode }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Country</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.country }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Country Code</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.country_a }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Name</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.name }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Street</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.street }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Neighbourhood</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.neighbourhood }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Region</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.region }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <TableContainer component={ Paper }>\r\n                <Table className={ classes.table } aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Pelias Metadata </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Confidence</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.confidence }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - postal code</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.postalcode }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - street</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.street }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - housenumber</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.housenumber }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Fragment>\r\n           ) : (\r\n             // for the given address no detailed could be found by the api, display error message\r\n             this.state.error ? (\r\n              <ErrorSnackbar\r\n                onClose={() => this.setState({ error: null })}\r\n                message={ this.state.error }\r\n              />\r\n             ) : ( <div></div>)\r\n           )\r\n        ) : this.state.loading ? (\r\n          // results are still loading...\r\n          <LoadingBar/>\r\n        ) : (\r\n          // no query provided\r\n          <div></div>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles),\r\n)(QueryManager);","C:\\Daten\\git\\peliasFrontend\\src\\components\\help.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\loadingBar.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\config.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\errorSnackbar.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\fileUpload.js",["55","56"],"C:\\Daten\\git\\peliasFrontend\\src\\components\\infoSnackbar.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":131,"column":11,"nodeType":"63","messageId":"64","endLine":131,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":139,"column":43,"nodeType":"67","endLine":139,"endColumn":127},{"ruleId":"65","severity":1,"message":"66","line":140,"column":43,"nodeType":"67","endLine":140,"endColumn":127},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'readableQuery' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation"]