[{"C:\\Daten\\git\\peliasFrontend\\src\\index.js":"1","C:\\Daten\\git\\peliasFrontend\\src\\serviceWorker.js":"2","C:\\Daten\\git\\peliasFrontend\\src\\components\\App.js":"3","C:\\Daten\\git\\peliasFrontend\\src\\components\\appHeader.js":"4","C:\\Daten\\git\\peliasFrontend\\src\\pages\\reverseQueryManager.js":"5","C:\\Daten\\git\\peliasFrontend\\src\\pages\\queryManager.js":"6","C:\\Daten\\git\\peliasFrontend\\src\\components\\help.js":"7","C:\\Daten\\git\\peliasFrontend\\src\\components\\loadingBar.js":"8","C:\\Daten\\git\\peliasFrontend\\src\\components\\config.js":"9","C:\\Daten\\git\\peliasFrontend\\src\\components\\errorSnackbar.js":"10","C:\\Daten\\git\\peliasFrontend\\src\\pages\\fileUpload.js":"11","C:\\Daten\\git\\peliasFrontend\\src\\components\\infoSnackbar.js":"12"},{"size":633,"mtime":1605790360273,"results":"13","hashOfConfig":"14"},{"size":5227,"mtime":1605790360279,"results":"15","hashOfConfig":"14"},{"size":1373,"mtime":1611654016651,"results":"16","hashOfConfig":"14"},{"size":2509,"mtime":1611653952791,"results":"17","hashOfConfig":"14"},{"size":8301,"mtime":1611651503911,"results":"18","hashOfConfig":"14"},{"size":9072,"mtime":1611068115521,"results":"19","hashOfConfig":"14"},{"size":2672,"mtime":1611854372917,"results":"20","hashOfConfig":"14"},{"size":582,"mtime":1611049060696,"results":"21","hashOfConfig":"14"},{"size":165,"mtime":1611048787857,"results":"22","hashOfConfig":"14"},{"size":1389,"mtime":1611048495898,"results":"23","hashOfConfig":"14"},{"size":6736,"mtime":1612000451586,"results":"24","hashOfConfig":"14"},{"size":1436,"mtime":1611653691070,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"5uimc1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Daten\\git\\peliasFrontend\\src\\index.js",[],["54","55"],"C:\\Daten\\git\\peliasFrontend\\src\\serviceWorker.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\App.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\appHeader.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\reverseQueryManager.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\queryManager.js",["56"],"import React, { Component, Fragment } from 'react';\r\nimport { withRouter} from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n  Table, \r\n  Paper,\r\n  TableRow, \r\n  TableCell,\r\n  TableHead,\r\n  TableContainer,\r\n  TableBody,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { compose } from 'recompose';\r\n\r\nimport LoadingBar from '../components/loadingBar'\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\nimport { pelias_url } from '../components/config';\r\n\r\nconst styles = theme => ({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  headerTable: {\r\n    fontSize: \"20px\",\r\n    width: \"40%\"\r\n  },\r\n  queryInput: {\r\n    marginLeft: theme.spacing(1),\r\n    backgroundColor: \"white\",\r\n    width: \"100%\",\r\n    [theme.breakpoints.down('lg')]: {\r\n      width: theme.spacing(120)\r\n    },\r\n    [theme.breakpoints.down('md')]: {\r\n      width: theme.spacing(80)\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: theme.spacing(30)\r\n    },\r\n    [theme.breakpoints.down('xs')]: {\r\n      width: theme.spacing(20)\r\n    },\r\n  }\r\n});\r\n\r\nclass QueryManager extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      query: \"\",\r\n      result: \"\",\r\n\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var query = this.props.match.params.query\r\n\r\n    if(query && this.state.query !== query) {\r\n      // query is set but does not match the information in the state\r\n      this.setState({\r\n        query: query\r\n      }, this.executeQuery)\r\n    } \r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    this.setState({ loading: true })\r\n\r\n    try {\r\n      const response = await fetch(`${ pelias_url }search?text=${endpoint}`, {\r\n        method,\r\n        body: body && JSON.stringify(body),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      this.setState({ loading: false })\r\n      return await response.json();\r\n    } \r\n    catch (error) {\r\n      console.error(error);\r\n      this.setState({ \r\n        error: error,\r\n        loading: false \r\n      });\r\n    }\r\n  }\r\n\r\n  async executeQuery() {\r\n    let result = (await this.fetch('get', this.state.query)) || [] \r\n\r\n    if(result.features.length === 0) {\r\n      // no information could be returned by the endpoint\r\n      this.setState({ \r\n        error: \"For the given address no data could be queried\"\r\n      })\r\n    }\r\n\r\n    this.setState({ \r\n      result: result\r\n    });\r\n  }\r\n\r\n  handleSubmit = evt => {\r\n    const { history } = this.props;\r\n\r\n    // push information into history, so exportable\r\n    history.push(\"/query/\" + this.state.query)\r\n    \r\n    evt.preventDefault()\r\n    this.executeQuery()\r\n  }\r\n  \r\n  handleQueryChange = evt => {\r\n    this.setState({\r\n      query: evt.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    // revert escaped slashes\r\n    const readableQuery = this.state.query.replaceAll('%2F', '/')\r\n\r\n    return (\r\n      <Fragment>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <TextField\r\n            required \r\n            type=\"text\"\r\n            key=\"inputQuery\"\r\n            placeholder=\"Gusshausstrasse 30\"\r\n            className={ classes.queryInput }\r\n            value={ this.state.query }\r\n            onChange={ this.handleQueryChange }\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            autoFocus \r\n          />\r\n        </form>\r\n        {\r\n          this.state.result !== \"\" ? (\r\n            // result present\r\n            this.state.result.features.length !== 0 ? (\r\n            // endpoint provided information to present\r\n            <Fragment>\r\n              <Typography variant=\"h4\" component=\"h2\" gutterBottom> Result for { this.state.result.geocoding.query.text } </Typography>\r\n              <TableContainer component={ Paper }>\r\n                <Table className={ classes.table } aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Geometry </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>X</TableCell>\r\n                      <TableCell>{this.state.result.features[0].geometry.coordinates[0] }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Y</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].geometry.coordinates[1] }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Properties </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Postalcode</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.postalcode }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Country</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.country }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Country Code</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.country_a }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Name</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.name }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Street</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.street }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Neighbourhood</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.neighbourhood }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Region</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.region }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <TableContainer component={ Paper }>\r\n                <Table className={ classes.table } aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={ 2 } className={ classes.headerTable }> Pelias Metadata </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Confidence</TableCell>\r\n                      <TableCell>{ this.state.result.features[0].properties.confidence }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - postal code</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.postalcode }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - street</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.street }</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell width={ \"40%\" }>Parsed text - housenumber</TableCell>\r\n                      <TableCell>{ this.state.result.geocoding.query.parsed_text.housenumber }</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Fragment>\r\n           ) : (\r\n             // for the given address no detailed could be found by the api, display error message\r\n             this.state.error ? (\r\n              <ErrorSnackbar\r\n                onClose={() => this.setState({ error: null })}\r\n                message={ this.state.error }\r\n              />\r\n             ) : ( <div></div>)\r\n           )\r\n        ) : this.state.loading ? (\r\n          // results are still loading...\r\n          <LoadingBar/>\r\n        ) : (\r\n          // no query provided\r\n          <div></div>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles),\r\n)(QueryManager);","C:\\Daten\\git\\peliasFrontend\\src\\components\\help.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\loadingBar.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\components\\config.js",[],["57","58"],"C:\\Daten\\git\\peliasFrontend\\src\\components\\errorSnackbar.js",[],"C:\\Daten\\git\\peliasFrontend\\src\\pages\\fileUpload.js",["59","60"],"import React, { Component, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  InputLabel,\r\n  MenuItem\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { compose } from 'recompose';\r\n\r\nimport LoadingBar from '../components/loadingBar';\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\nimport InfoSnackbar from '../components/infoSnackbar'\r\n\r\nconst styles = theme => ({\r\n  form: {\r\n    marginTop: theme.spacing(4)\r\n  },\r\n  inputLabel: {\r\n    marginTop: theme.spacing(4)\r\n  }\r\n});\r\nconst queryTypes = [\"Forward\", \"Reverse\"]      // language definition for dropdown\r\n\r\nclass FileUpload extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {      \r\n        document: '',\r\n        queryType: \"Forward\",\r\n        inputFileKey: Date.now(),         // after the successfull upload of a document we have to reiinitialize the input field\r\n\r\n        loading: true,                   // flag for displaying loading bar\r\n        success: null,                   // flag for displaying success messages\r\n        error: null,                   // flag for displaying error messages\r\n      };\r\n\r\n      this.onFileChange = this.onFileChange.bind(this);\r\n      this.handleQueryTypeChange = this.handleQueryTypeChange.bind(this)\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    try {\r\n      this.setState({\r\n        loading: true,\r\n      })\r\n\r\n      const response = await fetch(`/api${ endpoint }`, {\r\n        method,\r\n        headers: {\r\n          \"type\": \"formData\"\r\n        },\r\n        body: body\r\n      });\r\n\r\n      this.setState({\r\n        loading: false\r\n      })\r\n\r\n      if(response.ok === false) {\r\n        console.error(response)\r\n        this.setState({\r\n          error: { message: \"Error when uploading the document, please check the .csv format and try again\"}\r\n        })\r\n\r\n        return response\r\n      } else {\r\n        // api returns result as csv, have to quickly store it as blb\r\n        const blob = await response.blob();\r\n        const newBlob = new Blob([\"\\ufeff\", blob]);\r\n        const blobUrl = window.URL.createObjectURL(newBlob);\r\n    \r\n        // execute click on blob to download i \r\n        const link = document.createElement('a');\r\n        link.href = blobUrl;\r\n        link.setAttribute('download', `${this.state.document.name}_result.csv`);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentNode.removeChild(link);\r\n        window.URL.revokeObjectURL(blob);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState({ \r\n        error: error \r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange(evt) {\r\n      this.setState({ \r\n        document: evt.target.files[0] \r\n      })\r\n  }\r\n\r\n  handleQueryTypeChange(evt) {\r\n    this.setState({ queryType: evt.target.value })\r\n  }\r\n\r\n  async onSubmit(evt) {\r\n      evt.preventDefault()\r\n      const formData = new FormData()\r\n\r\n      // combine file input and input field\r\n      formData.append('document', this.state.document)\r\n      formData.append('queryType', this.state.queryType)\r\n\r\n      await this.fetch('post', \"/upload\", formData)\r\n\r\n      this.setState({\r\n        document: null,\r\n        inputFileKey: Date.now()    // reset the input key so that the input field is regenerated (reset)\r\n      })\r\n\r\n      if(this.state.error === null) {\r\n        this.setState({\r\n          success: \"Document uploaded successfully, initiated download of result csv\"\r\n        })\r\n      }\r\n  }  \r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    \r\n    return (\r\n      <Fragment>\r\n        <Typography variant=\"h4\">CSV Upload</Typography>\r\n        <Typography> Example File forward <a target=\"_blank\" href={`${window.location.origin}/public/ExampleCSV_forward.csv`}>ExampleCSV_forward.csv</a></Typography>\r\n        <Typography> Example File reverse <a target=\"_blank\" href={`${window.location.origin}/public/ExampleCSV_reverse.csv`}>ExampleCSV_reverse.csv</a></Typography>\r\n        \r\n        <form encType=\"multipart/form-data\" className={ classes.form } onSubmit={ this.onSubmit }>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              key={ this.state.inputFileKey }\r\n              name=\"btn-upload\"\r\n              style={ { display: 'none' } }\r\n              accept=\".csv\"\r\n              type=\"file\"\r\n              onChange={ this.onFileChange } \r\n            />\r\n\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" \r\n            >\r\n              Choose File\r\n            </Button>\r\n        </label>\r\n\r\n        <InputLabel id=\"labelInputQueryType\" className={ classes.inputLabel }>Query Type</InputLabel>\r\n        <Select\r\n          labelId=\"labelInputQueryType\"\r\n          id=\"inputQueryType\"\r\n          value={ this.state.queryType }\r\n          onChange={ this.handleQueryTypeChange }\r\n          required\r\n        >\r\n          {\r\n            queryTypes.map((queryType, i) => (\r\n              <MenuItem key={ i } value={ queryType }><em>{ queryType }</em></MenuItem>\r\n            ))\r\n          }\r\n        </Select>\r\n\r\n        <div className=\"file-name\">\r\n          { /* show upload button and filename only if file has been selected*/}\r\n          { this.state.document && this.state.document.name.length > 0 && (\r\n            <Typography className={ classes.inputLabel }>File: { this.state.document.name }</Typography>\r\n          )}\r\n        </div>\r\n          \r\n          <Button\r\n            color=\"primary\" \r\n            variant=\"outlined\"\r\n            disabled={ !this.state.document } \r\n            className={ classes.inputLabel }\r\n            type=\"submit\"\r\n          >\r\n            <AddIcon/>Upload\r\n          </Button>\r\n        </form>\r\n\r\n        { /* Flag based display of error snackbar */ }\r\n        {this.state.error && (\r\n        <ErrorSnackbar\r\n          onClose={() => this.setState({ error: null })}\r\n          message={ this.state.error.message }\r\n        />\r\n        )}\r\n\r\n        { /* Flag based display of loadingbar */ }\r\n        {this.state.loading && (\r\n          <LoadingBar/>\r\n        )}\r\n\r\n        { /* Flag based display of info snackbar */ }\r\n        {this.state.success && (\r\n          <InfoSnackbar\r\n            onClose={() => this.setState({ success: null })}\r\n            message={ this.state.success }\r\n          />\r\n        )}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withStyles(styles),\r\n  )(FileUpload);","C:\\Daten\\git\\peliasFrontend\\src\\components\\infoSnackbar.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":131,"column":11,"nodeType":"67","messageId":"68","endLine":131,"endColumn":24},{"ruleId":"61","replacedBy":"69"},{"ruleId":"63","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":139,"column":43,"nodeType":"73","endLine":139,"endColumn":127},{"ruleId":"71","severity":1,"message":"72","line":140,"column":43,"nodeType":"73","endLine":140,"endColumn":127},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'readableQuery' is assigned a value but never used.","Identifier","unusedVar",["74"],["75"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation"]